/**
 * creates a view matrix from 2 vertice points and a vector.
 * this matrix
 * @param *p1 myVector, a vector point of struct type myVector.
 * @param *p2 myVector, a vector point of struct type myVector.
 * @param *v1 , boost::numeric::ublas::vector<float> pointer to a ublas vector
 * @return returns a matrix<float> (4,4), OBSERVE NOT A POINTER!
 */
matrix<float> view(myVector *P0,myVector *Pref,
						boost::numeric::ublas::vector<float> *v1){


	/*find out the difference*/
	vector<float> *diff = difference(Pref,P0);
//std::cout << "---\n" <<"Diff: " << *diff << "\n";

	/*first we want to find out the camera's Z-axis in world coordinates.*/
	/*n = (P0-Pref)/(norm(P0-Pref))*/

	vector<float> *n = (normalization(diff));
//std::cout << "---\n" <<"n: " << *n << "\n";

	/*then we find the vector perpendicular to P0-Pref*/
	/*u = ( (v1 x n) / (norm(v1 x n)) )*/

	vector<float> *VxN = (cross_product(v1,n));
//std::cout << "---\n" <<"The calculated VxN is: " << *VxN << "\n";
	vector<float> *u = normalization(VxN);

//	vector<float> *u = new vector<float>(3);
//	u->insert_element(0,(((*VxN)(0)) / (*normVxN)(0)));
//	u->insert_element(1,(((*VxN)(1)) / (*normVxN)(1)));
//	u->insert_element(2,(((*VxN)(2)) / (*normVxN)(2)));

//std::cout << "\n-----------\n" <<"The calculated u is: " << *u << "\n";

	/*find the vector (v) perpendicular to n and u*/
	vector<float> *v = cross_product(n,u);

//std::cout << "\n-----------\n" <<"The calculated v is: " << *v << "\n";

	/*combine vertice y,v, and n to get the matrix [u v n], then invert to
	 * get the Mwc matrix, which will be:*/
	/*	|u1	u2	u3	0|
		|v1	v2	v3	0|
		|n1	n2	n3	0|
		|0	0	0	1|
	*/

	matrix<float> *Mwc = new matrix<float>(4,4);

	Mwc-> insert_element(0,0,( (*u)(0) ));
	Mwc-> insert_element(0,1,( (*u)(1) ));
	Mwc-> insert_element(0,2,( (*u)(2) ));
	Mwc-> insert_element(0,3, 0);

	Mwc-> insert_element(1,0,( (*v)(0) ));
	Mwc-> insert_element(1,1,( (*v)(1) ));
	Mwc-> insert_element(1,2,( (*v)(2) ));
	Mwc-> insert_element(1,3, 0);

	Mwc-> insert_element(2,0,( (*n)(0) ));
	Mwc-> insert_element(2,1,( (*n)(1) ));
	Mwc-> insert_element(2,2,( (*n)(2) ));
	Mwc-> insert_element(2,3, 0);

	Mwc-> insert_element(3,0, 0);
	Mwc-> insert_element(3,1, 0);
	Mwc-> insert_element(3,2, 0);
	Mwc-> insert_element(3,3, 1);

std::cout << "\n------------> " << *Mwc << "\n";

	/*Find the translation matrix of -P0*/
	vector<float> *ublasVP0 = new vector<float> (3);
	ublasVP0->insert_element(0,-(P0->x));
	ublasVP0->insert_element(1,-(P0->y));
	ublasVP0->insert_element(2,-(P0->z));
	matrix<float> TminusP0 = translate(ublasVP0);
//std::cout << "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n";
	matrix<float> *tp = &TminusP0;
std::cout << "\n-----------\n" <<"TminusP0: "<< *tp << "\n";

	/*now we calculate the final view matrix via the calculation:
	  Mwc * TminusP0*/

	matrix<float> resultMatrix = multiply(Mwc,tp);

	//deallocating memory for middle stage matrices.
	diff->resize(0);
	n->resize(0);
	VxN->resize(0);
	u->resize(0);
	v->resize(0);
	Mwc->resize(0,0);
	ublasVP0->resize(0);
/*TminusP0->resize(0,0);*/

	free(diff);
	free(n);
	free(VxN);
	free(u);
	free(v);
	free(Mwc);
	free(ublasVP0);
//	free(normVxN);


//std::cout << "The final matrix: " << resultMatrix << "\n";

	return resultMatrix;
}
